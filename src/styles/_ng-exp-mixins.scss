@use './global-mixins' as global;
@use './ng-exp-variables' as angExpVar;
// @use '@angular/material' as mat;

///////////////////// MATERIAL THEME //////////////////

// $ang-exp-primary: mat.define-palette(angExpVar.$ang-exp-space-cadet-palette);
// $ang-exp-accent: mat.define-palette(angExpVar.$ang-exp-giants-orange-palette);

// // The "warn" palette is optional and defaults to red if not specified.
// $ang-exp-warn: mat.define-palette(mat.$red-palette);

// $ang-exp-light-theme: mat.define-light-theme((
//     color: (
//         primary: $ang-exp-primary,
//         accent: $ang-exp-accent,
//         warn: $ang-exp-warn,
//     ),
//         // Only include `typography` and `density` in the default light theme.
//         // Specify the font to use something other than default Roboto font
//     typography: mat.define-typography-config($font-family: var(--ang-exp-main-font-family)),
//     density: 0,
//     ));

// $ang-exp-dark-theme: mat.define-dark-theme((
// color: (
//     primary: $ang-exp-primary,
//     accent: $ang-exp-accent,
//     warn: $ang-exp-warn,
// ),
// ));

// Apply the light theme by default
// @include mat.core-theme($ang-exp-light-theme);
// @include mat.all-component-themes($ang-exp-light-theme);

// Apply the dark theme only when the user prefers light themes.
// @media (prefers-color-scheme: dark) {
//     // Use the `-color` mixins to only apply color styles without reapplying the same
//     // typography and density styles.
//     @include mat.core-color($ang-exp-dark-theme);
//     @include mat.all-component-themes($ang-exp-dark-theme);

//    }

///////////////////// MATERIAL THEME //////////////////

////////////////// COLORS /////////////////////////

@mixin angExpColors($background-color: var(--ang-exp-primary), $color: var(--ang-exp-on-primary)) {
    background-color: $background-color;
    color: $color;
}

////////////////// END COLORS /////////////////////////

////////////// TYPOGRAPHY //////////////////////////

@mixin headingXLText {
    // color: var(--ang-exp-title-text-1);
    font-weight: 700;
    font-size: angExpVar.fontSize(heading-xl);
    line-height: angExpVar.lineHeight(heading-xl);
    font-family: var(--ang-exp-main-font-family), "Helvetica Neue", sans-serif;

    @include global.response(md) {
        font-size: angExpVar.fontSize(tablet-heading-xl);
        line-height: angExpVar.lineHeight(heading-lg);
    }
    
    @include global.response(sm) {
        font-size: angExpVar.fontSize(heading-lg);
        line-height: angExpVar.lineHeight(heading-lg);
    }
}

@mixin headingLText {
    // color: var(--ang-exp-title-text-1);
    font-weight: 700;
    font-size: angExpVar.fontSize(heading-lg);
    line-height: angExpVar.lineHeight(heading-lg);
    font-family: var(--ang-exp-main-font-family), "Helvetica Neue", sans-serif;
}

@mixin headingMText {
    // color: var(--ang-exp-title-text-1);
    font-weight: 700;
    font-size: angExpVar.fontSize(heading-md);
    line-height: angExpVar.lineHeight(heading-md);
    font-family: var(--ang-exp-main-font-family), "Helvetica Neue", sans-serif;
}

@mixin headingSText {
    // color: var(--ang-exp-subtitle-text-1);
    font-weight: 700;
    font-size: angExpVar.fontSize(heading-sm);
    line-height: angExpVar.lineHeight(heading-sm);
    font-family: var(--ang-exp-main-font-family), "Helvetica Neue", sans-serif;
}

@mixin bodyLText {
    color: var(--ang-exp-title-text-3);
    font-weight: 500;
    font-size: angExpVar.fontSize(body-l);
    line-height: angExpVar.lineHeight(body-l);
    font-family: var(--ang-exp-main-font-family), "Helvetica Neue", sans-serif;
}

@mixin bodyMText {
    color: var(--ang-exp-title-text-3);
    font-weight: 700;
    font-size: angExpVar.fontSize(body-m);
    line-height: angExpVar.lineHeight(body-m);
    font-family: var(--ang-exp-main-font-family), "Helvetica Neue", sans-serif;
}


////////////// END TYPOGRAPHY //////////////////////


//////////////// ELEMENTS //////////////////////
@mixin mainButtonStyles($height: var(--size-button-regular)) {
    @include global.flexboxLayout(row, space-between, center);
    border: none;
    border-radius: 24px;
    height: $height;
    margin: 4px 8px;
    padding: 0 24px;
}

@mixin topnavButtonStyles($height: var(--size-button-regular)) {
    @include headingMText;
    @include global.flexboxLayout(row, space-between, center);
    border: none;
    border-radius: 8px;
    height: $height;
    margin: 0 8px;
    padding: 0 24px;
}

@mixin topnavButtonStylesMobile {
    @include topnavButtonStyles;
    @include global.flexboxLayout(row, center, center);
    height: var(--size-button-mobile-height);
    min-width: 0;
    padding: 0;
    width: var(--size-button-mobile-width);
}

@mixin sidenavButtonStyles {
    @include headingMText;
    border: none;
    border-top-right-radius: 24px;
    border-bottom-right-radius: 24px;
    cursor: pointer;
    height: var(--size-button-tall);
    margin: 4px 8px;
    padding: 0 24px;
    text-align: left;
    width: 276px;
}

@mixin sidenavButtonStylesMobile {
    @include sidenavButtonStyles();
    width: 240px;
}

@mixin taskCardStyles {
    @include global.flexboxLayout(row, flex-start, flex-start);
    border-radius: 8px;
    box-sizing: border-box;
    box-shadow: 2px 4px 6px rgba(54, 78, 126, var(--ang-exp-task-card-drop-shadow-opacity));

    // this affects the drag handle only
    color: var(--ang-exp-title-text-1);

    cursor: pointer;
    margin-bottom: 10px;
    padding: 10px 2px;
    width: 100%;

    .handle-container {
        height: 100%;
        margin-right: 2px;
    }

    .drag-element-content {
        width: 100%;

        .task-title {
            @include headingMText;
            margin: 0 0 8px;
        }
    
        .task-subtitle {
            @include bodyMText;
            margin: 0 0 6px;
        }
    }
}

//////////////// END ELEMENTS //////////////////////
