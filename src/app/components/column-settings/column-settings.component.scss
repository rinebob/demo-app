@use '../../../styles/global-mixins' as global;
@use '../../../styles/kanban-mixins' as kanban;
@import "styles.scss";

.settings-dialog-container {
    @include global.flexboxLayout(column, flex-start, flex-start);
    background-color: var(--background-2);
    
    .title-container {
        @include global.flexboxLayout(column, flex-start, flex-start);
        margin-bottom: 12px;
        width: 100%;
        
        .title-text {
            @include kanban.kanbanHeadingLText;
            margin-bottom: 24px;
            padding: 0;
        }

        .subtitle-text {
            @include kanban.kanbanBodyMText;
            padding: 0;
        }
   }

    .checkbox-list-scroll-container {
        width: 100%;

        @include global.response(h-md) {
            margin-bottom: 24px;
            max-height: 262px;
            overflow-y: auto;
        }

        @include global.response(h-sm) {
            margin-bottom: 18px;
            max-height: 130px;
            overflow-y: auto;
        }

       .checkbox-list-container {
            @include global.flexboxLayout(column, flex-start, flex-start);
            margin-bottom: 24px;
            width: 100%;
            
            @include global.response(h-md) {
                margin-bottom: 0;
            }

            ::ng-deep {

                .mat-mdc-checkbox .mdc-checkbox .mdc-checkbox__native-control:enabled:not(:checked):not(:indeterminate):not([data-indeterminate=true])~.mdc-checkbox__background {
                    border-color: var(--title-text-1);
                    background-color: transparent;
                }

                .checkbox-container {
                    background-color: var(--checkbox-background);
                    width: 100%;
                    border-radius: 4px;
                    
                    &:not(:last-child) {
                        margin-bottom: 4px;
                        
                    }
                    
                    &:hover {
                        background-color: var(--checkbox-background-hover);
                        
                    }

                    mat-icon {
                        color: var(--title-text-1);
                    }
                }

                .mat-checkbox .mat-checkbox-frame {
                    border-color: var(--background-1);
                }

                .mat-mdc-checkbox label {
                    color: var(--title-text-1);
                }
            }

        }
    }


    .reset-buttons {
        @include global.flexboxLayout(row, space-around, center);
        flex-wrap: wrap;
        margin-bottom: 24px;
        width: 100%;

        .all-none-button {
            @include kanban.kanbanMainButtonStyles(20px);
            @include kanban.kanbanColors;
            font-size: 12px;
            justify-content: center;
            width: 40%;

            &:hover {
                @include kanban.kanbanColors($background-color: var(--kanban-primary-hover), $color: var(--kanban-on-primary-hover));
            }

            @include global.response(md) {
                font-size: 10px;
            }
        }

        .reset-initial-button {
            @include kanban.kanbanMainButtonStyles(20px);
            // colors indend to indicate button is disabled
            @include kanban.kanbanColors($background-color: var(--kanban-secondary-idle), $color: var(--background-5));
            font-size: 12px;
            justify-content: center;
            width: 40%;

            @include global.response(md) {
                font-size: 10px;
            }
        }

    }

   .action-buttons {
        @include global.flexboxLayout(row, space-between, center);
        width: 100%;

        &:not(:last-child) {
            margin-bottom: 24px;
        }

        button {
            width: 50%;
        }

        
        .cancel-button {
            @include kanban.kanbanMainButtonStyles;
            @include kanban.kanbanColors($background-color: var(--kanban-secondary-idle), $color: var(--kanban-on-secondary-idle));
            justify-content: center;

            &:hover {
                @include kanban.kanbanColors($background-color: var(--kanban-secondary-hover), $color: var(--kanban-on-secondary-hover));
            }
        }
        
        .save-button {
            @include kanban.kanbanMainButtonStyles;
            @include kanban.kanbanColors;
            justify-content: center;

            &:hover {
                @include kanban.kanbanColors($background-color: var(--kanban-primary-hover), $color: var(--kanban-on-primary-hover));
            }
        }
    }
}


// This is the element being dragged
.cdk-drag {
    @include global.flexboxLayout(row, flex-start, center);
    
    mat-icon {
        cursor: move;
    }

    &-content {
        @include global.flexboxLayout(column, flex-start, flex-start);
    }
    
    .element-title {
        @include kanban.kanbanBodyMText;
    }

    p {
        margin: 0;
        padding: 0;
    }
}

// This is the preview of the element being dragged
.cdk-drag-preview {
    @include global.flexboxLayout(row, flex-start, flex-start);
    color: var(--title-text-1);
    background-color: var(--background-1);
    width: 100%;
    min-height: 60px;
    margin: 4px 0;
    box-sizing: border-box;
    border-radius: 4px;
    box-shadow: 0 5px 5px -3px rgba(0, 0, 0, 0.2),
                0 8px 10px 1px rgba(0, 0, 0, 0.14),
                0 3px 14px 2px rgba(0, 0, 0, 0.12);

    .element-title {
        @include kanban.kanbanBodyMText;
    }

    p {
        margin: 0;
        padding: 0;
    }
}

// This affects the preview after releasing the mouse button to allow the drop
.cdk-drag-animating {
    // background-color: red;
    transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);
}

// These are all the elements not being dragged
.cdk-drop-list-dragging .cdk-drag:not(.cdk-drag-placeholder) {
    // background-color: blue;
    transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);
}

// This affects the location the element was dragged from, after the element is 
// clicked on and the drag is in progress
.placeholder {
    background-color: var(--background-1);
    border: dotted 2px #999;
    min-height: 60px;
    transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);
    width: 100%;
}
