@use '../../../styles/global-mixins' as global;
@use '../../../styles/kanban-mixins' as kanban;
@import "styles.scss";

.scroll-container {
    height: calc(100vh - var(--size-nav-bar-height));
    overflow: hidden;
    
    .columns-container {
        @include global.flexboxLayout(row, flex-start, flex-start);
        height: 100%;
        margin: 0 24px;
        overflow-x: auto;

        .column-container {
            @include global.flexboxLayout(column, stretch, flex-start);
            margin: 4px 12px;
            height: calc(100vh - calc(var(--size-nav-bar-height) + 64px));
            min-width: 250px;
            overflow-x: hidden;
            overflow-y: auto;
            padding: 0 4px;
            
            .column-header {
                @include global.flexboxLayout(row, flex-start, center);
                margin: 24px 0;

                .color-circle {
                    border-radius: 100%;
                    height: 12px;
                    margin-right: 12px;
                    width: 12px;
                }

                .column-header-text {
                    @include kanban.kanbanHeadingSText;
                    color: var(--subtitle-text-1);
                    margin: 0;
                    text-transform: uppercase;
                }
            }
        }

        .new-column-area {
            @include global.flexboxLayout(row, center, center);
            background: linear-gradient(180deg, rgba(43, 44, 55, 0.25) 0%, rgba(43, 44, 55, 0.125) 100%);
            border-radius: 6px;
            height: 80vh;
            margin-top: 64px;
            width: 100%;

            .column-button-container {

                @include kanban.kanbanHeadingXLText;
                color: var(--subtitle-text-1);
                text-transform: capitalize;
                white-space: normal;
                
                &:hover {
                    @include kanban.kanbanSidenavTextButtonStylesHover;
                }
            }

            .new-column-button {
                @include kanban.kanbanHeadingXLText;
                color: var(--subtitle-text-1);
                text-transform: capitalize;
                white-space: normal;
                
                &:hover {
                    @include kanban.kanbanSidenavTextButtonStylesHover;
                    
                    mat-icon {
                        @include kanban.kanbanSidenavTextButtonStylesHover;
                        
                    }
                }

                mat-icon {
                    color: var(--subtitle-text-1);
                    margin-right: 8px;
                }

            }
            
            mat-icon {
                color: var(--subtitle-text-1);
                margin-right: 8px;
            }
        }
    }
}

.no-tasks-container {
    @include global.flexboxLayout(column, center, center);
    height: 100%;
    height: calc(100% - var(--size-nav-bar-height));

    .empty-board {
        @include kanban.kanbanHeadingLText;
        color: var(--subtitle-text-1);
    }

    .add-task-button {
        @include kanban.kanbanHeadingMText;
        @include kanban.kanbanMainButtonStyles;
    }

}

// this is the same element as .cdk-drag.  It is NOT the element as it is being dragged.
// it is the card in the drag-from location
.task-card {
    @include kanban.kanbanTaskCardStyles;

    // this properly applies styles for light/dark themes for the source
    // card.  However, the dragged element only gets the color if a static value is used.
    // It does not get a color from a variable
    // background-color: yellow;
    // background-color: var(--test-background-2);
}

// This is the element that will be dragged (task card) and has the same behavior as 
// .task-card
.cdk-drag {
    
    // This does NOT work here
    &-content {
        // @include global.flexboxLayout(column, flex-start, flex-start);
        // background-color: chartreuse;
    }
}

// This is the preview of the drag element as it is being dragged away from its source
// location
.cdk-drag-preview {
    
     // THIS ONLY WORKS WITH A STATIC COLOR.  VARIABLE COLOR DOES NOT WORK
    // This overrides the same class in kanban-tasks.scss
    // background-color: purple;
    // background-color: var(--test-background-2);

    // width: 100%;
    // min-height: 60px;
    // margin: 4px 0;
    // box-sizing: border-box;
    // border-radius: 4px;
    // box-shadow: 0 5px 5px -3px rgba(0, 0, 0, 0.2),
    //             0 8px 10px 1px rgba(0, 0, 0, 0.14),
    //             0 3px 14px 2px rgba(0, 0, 0, 0.12);

}

// This is the dragged element after releasing the mouse button to allow the drop
// animation to begin.  It affects the card from mouse up to when it reaches the new
// destination
.cdk-drag-animating {
    // THIS ONLY WORKS WHEN .cdk-drag DOES NOT HAVE ITS OWN BACKGROUND COLOR AND
    // THIS VALUE IS NOT A VARIABLE (i.e. 'red' works but 'test-background-1' does not)
    // Also it needs the transition property set in order to work properly
    // This overrides the same class in styles.scss
    // background-color: yellow;
    // background-color: var(--test-background-1);
    transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);
}

// This is all the elements except the dragged element.
.cdk-drop-list-dragging .cdk-drag:not(.cdk-drag-placeholder) {
    // THIS PROPERLY APPLIES LIGHT/DARK THEME COLORS
    // This overrides same class in styles.scss
    // background-color: blue;
    // background-color: var(--test-background-1);
    transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);
}

// This affects the location the element was dragged from, after the element is 
// clicked on and the drag is in progress
.placeholder {
    // this properly takes light/dark theme colors
    background-color: var(--drag-preview-placeholder-color);
    border: dotted 2px var(--drag-preview-outline-color);
    border-radius: 8px;
    margin: 4px 0;
    min-height: 60px;
    transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);
    width: 98%;
}
